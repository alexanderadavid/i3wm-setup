{
  // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Go Printf": {
    "prefix": "printf",
    "body": ["fmt.Printf(\"$1\", $2)"],
    "description": "Printf with newline"
  },
  "Go if error": {
    "prefix": "iferr",
    "body": ["if err != nil{\n\treturn $1err\n}"],
    "description": "If error not nil return wrapped error"
  },
  "Go if error then panic": {
    "prefix": "panerr",
    "body": ["if err != nil{\n\tpanic(err)\n}"],
    "description": "If error not nil panic"
  },
  "Go run through cursored func": {
    "prefix": "runCursor",
    "body": [
      "cursor:=\"\"\n for{\ncursor, err = $1(c, cursor)\n if cursor==\"\"{\nbreak\n}\n}\n "
    ],
    "description": "Run through cursored job"
  }
}
